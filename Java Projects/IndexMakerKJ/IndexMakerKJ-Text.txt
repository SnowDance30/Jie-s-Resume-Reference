/**
 *  Purpose: The program will read an input file, loading all the information 
 * 			 inside it, output the words with its respective indices
 *  		 in another output file.
 *  		 from the command-line args or prompts the user for the file names.
 *  Author: Maria Litvin and Gary Litvin
 *  Create on: Unknown
 *  Modified by: K. Jie
 *  Modified on: Oct 1st 2018
 */

//Import FileReader package to in order to use its codes.
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.Scanner;

public class IndexMaker
{
  public static void main(String[] args) throws IOException
  {
	  //Initialize Scanner.
    Scanner keyboard = new Scanner(System.in);
    String fileName;

    // Open input file and enter the 
    // receive the filename from keyboard.
    if (args.length > 0)
      fileName = args[0];
    else
    {
      System.out.print("\nEnter input file name: ");
      fileName = keyboard.nextLine().trim();
    }

    BufferedReader inputFile =
                 new BufferedReader(new FileReader(fileName), 1024);

    // Create output file and 
    // receive the filename from keyboard.

    if (args.length > 1)
      fileName = args[1];
    else
    {
      System.out.print("\nEnter output file name: ");
      fileName = keyboard.nextLine().trim();
    }

    PrintWriter outputFile =
                 new PrintWriter(new FileWriter(fileName));

    // Make a new object of the DocumentIndex
    //class and running the creating index process.

    DocumentIndex index = new DocumentIndex();

    String line;
    int lineNum = 0;
    while ((line = inputFile.readLine()) != null)
    {
      lineNum++;
      index.addAllWords(line, lineNum);
    }

    // Save the information in the output file.

    for (IndexEntry entry : index)
      outputFile.println(entry);

    // Close the files and the tools.

    inputFile.close();
    outputFile.close();

    keyboard.close();
    System.out.println("Done.");
  }
}

/**
 *  Purpose: The class creates each word index which is a line 
 *  		 with its word and the respective line numbers, and
 *  		 creates methods to store words and numbers.
 *  Author:  K. Jie
 *  Created On:  Oct 1st 2018
 */

//Import the ArrayList tool in the class.
import java.util.ArrayList;

public class IndexEntry 
{

	private String word;
	private ArrayList<Integer> numsList;
	
	//The constructor will assign the value to
	//'word' property and make a new arraylist .
	public IndexEntry(String word)
	{
		this.word = word.toUpperCase();
		numsList = new ArrayList<Integer>();		
	}
	
	/**Add the line numbers into the numsList if 
	 * not included yet.
	 * @param num
	 */
	public void add(int num)
	{
		
		if (!(numsList.contains(num))) 
		{
			numsList.add(num);
		}
		
	}
	

	//Return 'word' value.
	public String getWord()
	{
		return this.word;
	}
	
	//Overrides toString methods
	//and prints the line with the format provided.
	public String toString()
	{
		//Make all the numbers in a String.
		String container = "";
		for (int r =0; r< numsList.size();r++ )
		{
			if (r== numsList.size()-1)
			{
				container+= numsList.get(r);
			}else
			{
				container+= numsList.get(r)+", ";
			}
		}
		return word+" "+ container;
		
	}
	
}

/**
 * Purpose: Purpose: The class will create an array list that
 *  		holds all the IndexEntry objects(words and numbers), 
 *  		and organizes the objects in an alphabetical order.
 *  Author:  K. Jie
 *  Created On:  Oct 1st 2018
 */
//Import the ArrayList tool in the class.
import java.util.ArrayList;

//Extend the Arraylist class and restricts its genericity.
public class DocumentIndex extends ArrayList<IndexEntry>
{

	//Calling the super constructor method.
	public DocumentIndex()
	{
		super();
	}
	
	//Overload the super constructor method.
	public DocumentIndex(int capicity)
	{
		super(capicity);
	}

	//Add numbers to its respective word line.
	public void addWord(String word, int num)
	{
		int line = this.foundOrInserted(word);
		this.get(line).add(num);		
	}
	
	/** This help method is used to compare the words 
	 * to determine add numbers to which object of the ArrayList<IndexEntry>
	 * @param word
	 * @return index of the object in ArrayList
	 */
	private int foundOrInserted(String word)
	{
		for (int r = 0; r< this.size(); r++ )
		{
			//Compare the alphabet order to determine 
			//whether it should be inserted.
			if (word.compareToIgnoreCase(this.get(r).getWord()) <0 )
			{
				IndexEntry index = new IndexEntry(word);
				this.add(r,index);
				return r;
			//Compare if the word is the same.
			}else if (word.equalsIgnoreCase( this.get(r).getWord()) )
			{
				return r;
			}
		}
		//Add one new object if it is a new word.
		IndexEntry index = new IndexEntry(word);
		this.add(index);
		return this.size()-1;
	}
	
	/**
	 * Extract all the words from the input file,
	 * make words separate and call the methods above.
	 * @param str
	 * @param num
	 */
	public void addAllWords(String str, int num)
	{
		//Use split method to separate words.
		String[] words = str.split("\\W+");
		
		//Call addWord method to add the line numbers.
		for (String i: words)
		{
			if (!(i.equals("")))
			{
				addWord(i, num);
			}
		}
	}
}