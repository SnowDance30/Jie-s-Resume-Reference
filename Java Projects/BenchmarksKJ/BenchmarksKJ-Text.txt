/**
 * purpose: The class is the main class contains GUI interface.
 * 			It runs the chosen method, records the result data
 * 			and displays it on the console.
 * created by: Maria Litvin and Gary Litvin
 * created on: unknown
 * modified by: Kevin Jie
 * modified on: November 16th, 2018
 */

import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JComboBox;
import java.util.Random;
import java.util.Arrays;

public class Benchmarks extends JFrame
{
	private static int numberOfRuns = 20;

	private JTextField arraySizeInput, display;
	private String sortMethodNames[] =
		{"Selection Sort", "Insertion Sort", "Mergesort", "Quicksort"};
	private JComboBox<String> chooseSortMethod;

	private final long seed;
	private int arraySize;

	// Constructor initializes fields and the seed.
	public Benchmarks()
	{
		super("Benchmarks");

		Container c = getContentPane();
		c.setLayout(new GridLayout(6, 1));

		c.add(new JLabel(" Array size: "));
		arraySizeInput = new JTextField(4);
		arraySizeInput.setText("1000");
		arraySizeInput.selectAll();
		c.add(arraySizeInput);

		chooseSortMethod = new JComboBox<String>(sortMethodNames);
		
		c.add(chooseSortMethod);

		JButton run = new JButton("Run");
		run.addActionListener(new RunButtonListener());
		c.add(run);

		c.add(new JLabel(" Avg Time (milliseconds): "));

		display = new JTextField("   Ready");
		display.setBackground(Color.YELLOW);
		display.setEditable(false);
		c.add(display);

		// set a seed to use the same random
		// generator while running the program
		seed = System.currentTimeMillis();
	}

	// fill the array with random numbers and use the
	// chosen sort method, return the total sort time
	private long runSort(double[] a, int sortMethod, int numberOfRuns)
	{
		// create a Random object with the assigned seed
		Random generator = new Random(seed);
	  
		long totalTime = 0;
		long startTime;
		long endTime;
		
		for (int r = 0; r < numberOfRuns; r++)  
		{
			// fill the array with random numbers
			for (int i = 0; i < a.length; i++)  
			{
				a[i] = generator.nextDouble();
			}
		
			startTime = System.currentTimeMillis();
		
			// select the chosen method
			if (sortMethod == 1)
			{
				SelectionSort.sort(a);
			}
			else if (sortMethod == 2)
			{
				InsertionSort.sort(a);
			}
			else if (sortMethod == 3)
			{
				Mergesort.sort(a);
			}
			else
			{
				Quicksort.sort(a);
			}
	
			endTime = System.currentTimeMillis();
			// add time after a run
			totalTime += (endTime - startTime);
		}
    
		return totalTime;
    
	}

	// the action class of clicking the button
	private class RunButtonListener implements ActionListener
	{
		// display necessary texts
		public void actionPerformed(ActionEvent e)
		{
			String inputStr = arraySizeInput.getText().trim();
			try
			{
				arraySize = Integer.parseInt(inputStr);
			}
			catch (NumberFormatException ex)
			{
				display.setText(" Invalid array size");
				arraySize = 0;
				return;
			}

			if (arraySize <= 0)
			{
				display.setText(" Invalid array size");
				return;
			}

			if (arraySize <= 0)
			{
				return;
			}

			//prepare to execute runSort 
			int sortMethod = chooseSortMethod.getSelectedIndex() + 1;
			double a[] = new double[arraySize];
			//calculate the average time for one run
			double avgTime = (double)runSort(a, sortMethod, numberOfRuns)
                                                          / numberOfRuns;
			display.setText(String.format("  %.2f", avgTime));

			arraySizeInput.selectAll();
			arraySizeInput.requestFocus();
			System.out.println("Array size = " + arraySize +
					" Runs = " + numberOfRuns + " " +
					sortMethodNames[sortMethod - 1] + " avg time: " + avgTime);

		}
	}

	// main method
	public static void main(String[] args)
	{
		// run 20 times
		numberOfRuns = 20;
		if (args.length > 0)
		{
			int n = -1;
			try
			{
				n = Integer.parseInt(args[0].trim());
			}
			catch (NumberFormatException ex)
			{
				System.out.println("Invalid command-line parameter");
				System.exit(1);
			}
			if (n > 0)
				numberOfRuns = n;
		}

		Benchmarks window = new Benchmarks();
		window.setBounds(300, 300, 180, 200);
		window.setDefaultCloseOperation(EXIT_ON_CLOSE);
		window.setVisible(true);
	}
}

/**
 * purpose: The class will sort the array ascendingly
 * 			by using insertion sort algorithm.
 * created by: Maria Litvin and Gary Litvin
 * created on: unknown
 * modified by: Kevin Jie
 * modified on: November 16th, 2018
 */

public class InsertionSort
{
	public static void sort(double[] a)
	{
		for (int n = 1; n < a.length; n++)
		{
			double aTemp = a[n];

			// Shift elements to one right until the saved
			// element is greater than the current element.
			int i = n;
			while (i > 0 && aTemp < a[i-1])
			{
				a[i] = a[i-1];
				i--;
			}
			
			// Insert the saved element.
			a[i] = aTemp;
		}
	}
}

/**
 * purpose: The class will sort the array ascendingly
 * 			by using mergesort algorithm.
 * created by: Maria Litvin and Gary Litvin
 * created on: unknown
 * modified by: Kevin Jie
 * modified on: November 16th, 2018
 */

public class Mergesort
{
	private static double[] temp;

	// start sorting
	public static void sort(double[] a)
	{
		int n = a.length;
		temp = new double[n];
		recursiveSort(a, 0, n-1);
	}

	// Recursive method uses "divide and conquer".
	private static void recursiveSort(double[] a, int from, int to)
	{
		// base case.
		if (to - from < 2)       
		{
			if (to > from && a[to] < a[from])
			{
				// swap two elements
				double aTemp = a[to];
				a[to] = a[from]; 
				a[from] = aTemp;
			}
		}
		else                     
		{
			// "divide and conquer"
			int middle = (from + to) / 2;
			recursiveSort(a, from, middle);
			recursiveSort(a, middle + 1, to);
			merge(a, from, middle, to);
		}
	}

	// merge two arrays into one sorted array
	private static void merge(double[] a, int from, int middle, int to)
	{
		//set left, right and temporary pointers
		int i = from, j = middle + 1, k = from;

		//compare the left one to the right one
		while (i <= middle && j <= to)
		{
			if (a[i] < a[j])
			{
				temp[k] = a[i];   
				i++;
			}
			else
			{
				temp[k] = a[j];
				j++;
			}
			k++;
		}

		// copy the first half into the temp array
		while (i <= middle)
		{
			temp[k] = a[i];   
			i++;
			k++;
		}

		// copy the second half into the temp array
		while (j <= to)
		{
			temp[k] = a[j];   
			j++;
			k++;
		}

		// copy back to the original array to make it ordered
		for (k = from; k <= to; k++)
			a[k] = temp[k];
	}
}

 /**
   * purpose: The class will sort the array ascendingly
   * 		  by using quicksort algorithm.
   * created by: Maria Litvin and Gary Litvin
   * created on: unknown
   * modified by: Kevin Jie
   * modified on: November 16th, 2018
   */
public class Quicksort
{
	// start sorting
	public static void sort(double[] a)
	{
		recursiveSort(a, 0, a.length - 1);
	}
  
	// recursive method to sort the array
	private static void recursiveSort(double[] a, int from, int to)
	{
		// base case
		if (from >= to)
		{
			return;
		}
			
    	// choose the median as the pivot location
		int p = (from + to ) / 2;

		// set and move the pointers
		int i = from;
		int j = to;
    	while (i <= j)
    	{
    		if (a[i] <= a[p])
    			i++;
    		else if (a[j] >= a[p])
    			j--;
    		else
    		{
    			// swap to make the two in correct order
    			swap (a, i, j);
    			i++;
    			j--;
    		}
    	}

    	// swap the pivot to the correct position
    	if (p < j)  
    	{
    		swap (a, j, p);
    		p = j;
    	}
    	else if (p > i)
    	{
    		swap (a, i, p);
    		p = i;
    	}

    	// divide the array and re-sort them
    	recursiveSort(a, from, p - 1);
    	recursiveSort(a, p + 1, to);
	}

	// help method to swap two elements
	private static void swap (double[] a, int i, int j)
	{
		double temp = a[i]; 
		a[i] = a[j]; 
		a[j] = temp;
	}	
}

/**
 * purpose: The class will sort the array ascendingly 
 * 			by using selection sort algorithm.
 * created by: Maria Litvin and Gary Litvin
 * created on: unknown
 * modified by: Kevin Jie
 * modified on: November 16th, 2018
 */

public class SelectionSort
{
	public static void sort(double[] a)
	{
		// Searching in backward order
		for (int n = a.length; n > 1; n--)
		{
			// Search the largest value from 
			// a[0] to current element.
			int iMax = 0;
			for (int i = 1; i < n; i++)
			{
				if (a[i] > a[iMax])
					iMax = i;
			}
			
			// Swap two elements
			double aTemp = a[iMax];
			a[iMax] = a[n-1];
			a[n-1] = aTemp;

		}
	}
}